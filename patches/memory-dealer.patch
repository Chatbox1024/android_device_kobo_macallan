--- /home/thedro/MemoryDealer.cpp
+++ /home/thedro/MemoryDealer_new-5e22ba1f6a3004791596ecc7223087241b0eb16a.cpp
@@ -225,17 +225,16 @@
 
 // ----------------------------------------------------------------------------
 
-#ifdef ADD_LEGACY_MEMORY_DEALER_CONSTRUCTOR_SYMBOL
-extern "C" void _ZN7android12MemoryDealerC2EjPKcj(void* obj, size_t size, const char* name, uint32_t flags);
-extern "C" void _ZN7android12MemoryDealerC1EjPKc(void* obj, size_t size, const char* name) {
-    _ZN7android12MemoryDealerC2EjPKcj(obj, size, name, 0);
-}
-#endif
-
 MemoryDealer::MemoryDealer(size_t size, const char* name, uint32_t flags)
     : mHeap(new MemoryHeapBase(size, flags, name)),
     mAllocator(new SimpleBestFitAllocator(size))
-{    
+{
+}
+
+MemoryDealer::MemoryDealer(size_t size, const char* name)
+    : mHeap(new MemoryHeapBase(size, 0, name)),
+    mAllocator(new SimpleBestFitAllocator(size))
+{
 }
 
 MemoryDealer::~MemoryDealer()
@@ -355,7 +354,7 @@
                 mList.insertBefore(free_chunk, split);
             }
 
-            ALOGE_IF((flags&PAGE_ALIGNED) && 
+            ALOGE_IF((flags&PAGE_ALIGNED) &&
                     ((free_chunk->start*kMemoryAlign)&(pagesize-1)),
                     "PAGE_ALIGNED requested, but page is not aligned!!!");
 
@@ -438,14 +437,14 @@
     size_t size = 0;
     int32_t i = 0;
     chunk_t const* cur = mList.head();
-    
+
     const size_t SIZE = 256;
     char buffer[SIZE];
     snprintf(buffer, SIZE, "  %s (%p, size=%u)\n",
             what, this, (unsigned int)mHeapSize);
-    
+
     result.append(buffer);
-            
+
     while (cur) {
         const char* errs[] = {"", "| link bogus NP",
                             "| link bogus PN", "| link bogus NP+PN" };
@@ -457,7 +456,7 @@
             int(cur->size*kMemoryAlign),
                     int(cur->free) ? "F" : "A",
                     errs[np|pn]);
-        
+
         result.append(buffer);
 
         if (!cur->free)
